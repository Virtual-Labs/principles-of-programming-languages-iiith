#+TITLE : Architecture of POPL Virtual Lab

* Lab Layout

The lab has been divided into three frames according to then
functionality provided by the lab.
- Content
- Login and Upload Frame
- Terminal

** Content

The lab is divided into 9 experiments.  Each of these experiments is
divided into modules.  The modules are further divided into tasks. And,
each of these tasks may consist of several steps.  The ideology of such
a layout is to enable the student to perform the experiment in
micro-steps, thus, enhancing the learning process by allowing the
student to build a larger program step by step in smaller chunks.  Each
of these steps and tasks are testable at a module level currently.
Thus, enabling the user to upload their programs and verify them.


** Login and Upload Frame

The upper panel of the right frame provides the user space to login and
upload their scheme programs. The architecture of this frame is as follows:

*** Logging or Registering for the Lab

=login-form= script has two options - login and register. When the user
registers or logs in, the credentials are sent to =ldap-exec= script
which contacts the LDAP server for authenticating the user before giving
them the option of uploading the files or adding the user to the
database. If the registration of the user is confirmed, the user can
authenticate using the registered credentials. When the registration is
successful, a connection to the NFS server is made and a simple shell
command is executed using ssh connection to create the home directory
for the registered user.


*** User Space and the Upload frame
Once these credentials are validated from the
server, the =member-index= script is executed and an upload form is
displayed to the user. The user can upload his scheme programs adhering
to the naming conventions given in the experiments. Once the user
uploads, the control gets transferred to the =upload-file= script. The
file is uploaded temporarily to the =tmp= folder in the build folder of
the svn repository.


*** Sending files to server
The file is then sent to the eval1 server through secure copy by
establishing an ssh connection to the server using the evaluator
credentials. In the eval1 server, in the home directory of the
evaluator, we have three different directories - /test-cases/ where all
the test files for all the experiments are stored, /test-results/ where
the results of the evaluated test cases are stored for every user inside
their own directories and /upload-files/ in which the uploaded files for
each user are stored in their respective directories. The reason why we
maintain a repository of all the files is to ensure we have an original
uploaded file with which cross-checking of the results can be done in
case of any future conflicts.


*** How is testing done?  
The name of the uploaded file is extracted and the respective folder of
test cases are copied into the user directory of the user in the
=upload-files= directory. The parent test file is then run using the
command =racket test-file-name= and the results are directed to the file
in the respective user directory of the =test-results= folder.

There was a proposal to use the user accounts to do the testing of the
files instead of having a central account. But, this was not successful
due to the resource limits placed on the user accounts. Racket needs a
lot of memory space to load its modules in order to run the test cases
and the limits placed on the memory address for each account restrict
the modules which can be loaded which is why the command execution gets
aborted. Please find the detailed documentation on the user account
limits [[http://community.virtual-labs.ac.in/wiki/Shell_Access][here]].

There are four models of the testing which have been proposed: 

 - Students write the test cases and run them. And, upload both of them
   as the part of their assignments. They can see the results of the
   test files run on their code.

 - Test Cases are provided in the lab as download-ables. Students are
   asked to run the test cases and submit them as part of their
   assignments. They can see the results of the
   test files run on their code.

 - Test Cases are not provided to the students but run on their
   submitted files and the results of the test cases are available for
   them to see.

 - Neither the test cases nor the results are available for the students
   to view.

In the current setup, we are following the third proposal of testing method. 


*** The results and file to the user home directories
A python script =evaluate= sends the test results and the uploaded files
to the user's home directories from the evaluator account. A
user can not change any other file except for their own files. 


** Terminal

The terminal has been provided as a part of the browser so as to enable
the students or the users of the lab to run the Racket software in the
terminal. Also, the terminal provides a user space for the user where
they can find the uploaded files and the results of the test cases run
on those files.  They have also been provided the facility of =vi editor=
in the terminal.

The terminal can be accessed with following particulars:
Host / IP: 10.2.48.12
Port : 22

User Name and Password credentials should be the same as used in the
login frame above.


* Current Issues in the Lab

- Security Concerns
  + How does the container handle when a user uploads a file with
    infinite loop?

- How to stop the users from accessing any other folder than their home
  directories?

- The SSL certificate needs to be bypassed to open the terminal on all
  machines.

- How to make the servers accessible to outside?

- registered users can access others accounts and copy data from there

- When there are too many logins from the same credentials in the shell,
  they are getting logged out and it throws the error message "Too many
  logins"




* test
* test

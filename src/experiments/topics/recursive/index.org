#+TITLE: Experiment 8 - Language with Recursive Functions

#+TAGS: readings(r) hw(h)
#+SETUPFILE: ../../../org-templates/level-2.org
#+LINK_HOME: ../../content.html
#+LINK_UP: ../../content.html#sec-6

* Prerequisites for the Experiment
You should have read Chapter - 3, Expressions from the text book
*EOPL*. 

* Learning Objectives of the Experiment 

The goal of this experiment is to design and implement the abstract
syntax, parser and evaluator of a language with recursive functions. 

* Theory
Most high-level computer programming languages support recursion by
allowing a function to call itself within the program text. Some
functional programming languages do not define any looping constructs
but rely solely on recursion to repeatedly call code. Computability
theory has proven that these recursive-only languages are
mathematically equivalent to the imperative languages, meaning they
can solve the same kinds of problems even without the typical control
structures like ’while’ and ’for’.

Building a Language with Recursive Functions will require again the
following four steps:

*Abstract Syntax*

Similar to the previous languages, we decide to use a list based
abstract syntax for representing procedures.

  (recursive ([even? (n) (if (0? n) #t (odd? (sub1 n)))]
               [odd?  (n) (if (0? n) #f (even? (sub1 n)))])
       (even? 5))

*Evaluation*

The evaluator is responsible for evaluating the abstract-syntax tree
produced by the parser in order to come up with the output of the
input program sequence.

For example: for the following scheme expression;

  (recursive ([even? (n) (if (0? n) #t (odd? (sub1 n)))]
               [odd?  (n) (if (0? n) #f (even? (sub1 n)))])
       (even? 5))

will create an recursive environment with bindings for even? and odd?
and will give the following output:

(#f boolean)

* Procedure

#+BEGIN_EXAMPLE
Instructions
1. Create a file named "recursive.ss". 
2. You can include all the modules in this file, OR,
3. You can "require" all the modules in this file.
4. Zip all the files required for the experiment and upload them. The name of the zip file should be recursion.zip.
#+END_EXAMPLE

** Module 1 - Design the Abstract Syntax for the Language with Recursive Functions

: Create a module "recursive-ast.ss". 
Require the modules relevant and provide the functions defined in this module.

*** Task 1 - Write the function to define the abstract syntax tree for the expressions.

#+BEGIN_EXAMPLE
A recursive expression either consists of numbers or expressions with
primary operators - +,-,/,* and operands as well as assume blocks
,identifiers, (recursive and normal) functions and apply
operations. Thus, the grammar such a language ucan be written as:

ast ::= num-ast | ifte-ast | assume-ast | 
        id-ref-ast | function-ast | recursive-ast | app-ast

where

- num-ast implies an ast consisting of just numbers, for example: 5,
  6, 2, 0 etc.
- ifte-ast is an ast with a test expression, then and else expressions
  each of which is an ast.
- assume-ast consists of a list of bindings and a body which are again
  of the form ast.
- id-ref-ast consists of an identifier only. example ’x’.
- function-ast consists of a list of formals which are identifiers and
  a body which is a ast’s.
- recursive-ast consists of a list of function bindings and a body
  which is an ast while the bindings are lists of function names,
  formals and bodies which are of types id-ref and ast’s.
- app-ast consists of an operator and an operation (which in turn are
  again of the form - ast). This is used since operations are now not
  always inbuilt, so using prim-app may or may not be always correct.

Thus, we define the abstract syntax for the language with functions as
a datatype named "ast". The type predicate for the datatype ast is
"ast?". It shall have constructors for various elements of the
language - number, app, id-ref, assume and function.

The constructor number creates ast for only numbers. 
number : number? -> ast?

The constructor app takes an operator and list of operands both of
which are of the form "ast".
(app rator rands) → ast?
rator : ast?
rands : (list-of ast?)

The constructor id-ref defines an identifier as an ast. It takes an
argument sym. The type predicate for sym is id?.
(id-ref sym) -> ast?
sym : id?

The constructor assume takes a list of bindings denoted by binds and a
body denoted by body and returns an ast. 
(assume binds body) → ast?
binds : (list-of bind?)
body : ast?

The constructor function consists of a list of formals which are
identifiers and a body which is an "ast".
(function formals body) → ast?
formals : (list-of id?)
body : ast?

The constructor ifte takes three arguments - test, then and else-ast,
each of which are an "ast".
(ifte test then else-ast) -> ast?
test : ast?
then : ast?
else-ast : ast?

The constructor recursive takes a list of function bindings and a body
which is an "ast".
(recursive fbinds body) -> ast?
fbinds : (list-of fbind?)
body : ast?
#+END_EXAMPLE

 + Step 1 - Write the constructors for numbers. 
    - A /number/ takes an argument /datum/ of type /number?/. 

 + Step 2 - Write the constructor for an identifier.
    - An identifier /id-ref/ takes a variable /sym/ of the type /id?/.

 + Step 3 - Write the constructor for binding the identifier to its value. 
    - /assume/ takes two arguments /binds/ and /body/. 
    - The type predicate for /binds/ is /list-of bind?/. It is a list
      of all available bindings. 
    - The type predicate for /body/ is an /ast?/.

 + Step 4 - Write the constructor for /app/. 
    - The constructor /app/ takes two arguments /rator/ and /rands/. 
    - /rator/ is of type /ast?/. 
    - /rands/ is of type /list-of ast?/. 

 + Step 5 - Write the constructor for the /function/. 
    - /function/ takes /formals/ and /body/ as arguments. 
    - /formals/ is a /list-of id?/ and /body/ is an /ast?/. 

 + Step 6 - Write the constructor for /ifte/.
    - /ifte/ takes three arguments /test/, /then/ and /else-ast/. 
    - All the arguments are of type /ast?/. 

 + Step 7 - Write the constructor for /recursive/. 
    - /recursive/ takes two arguments /fbinds/ and /body/. 
    - The type predicate for /fbinds/ is /list-of fbind?/ and the type
      predicate for /body/ is /ast?/. 

 + Step 8 - Use /define-datatype/ to define the abstract syntax for
   the language with recursive functions. 
    - The name of the function should be /ast/. 
    - The type predicate of the function is /ast?/. 
    - It has the following constructors: /number/, /app/, /function/,
      /id-ref/, /assume/, /ifte/ and /recursive/. 

*** Task 2 - Define other functions. 

 + Step 1 - Define  the type /bind?/.  
   1. Use /define-datatype/ to define the function  /bind/.  The  type
      predicate of  the function  /bind/ is /bind?/.   
   2. It  defines  a  constructor  /make-bind/  which  takes  two
      arguments /b-id/ and  /b-ast/. The type predicate for  /b-id/ is
      /id?/ and type predicate for /b-ast/ is /ast?/.

 + Step 2 - Define function /bind-id/.  
   1. Use /define/ to build a function /bind-id/. 
   2. It takes an argument /b/ using /lambda/. 
   3. Specify /cases/ on /bind b/. 
      - It uses the constructor /make-bind/ which takes two arguments
        /b-id/ and /b-ast/ and returns /b-id/.

 + Step 3 - Define function /bind-ast/.
   1. Use /define/ to build a function /bind-ast/. 
   2. It takes an argument /b/  using /lambda/. 
   3. Specify /cases/ on /bind b/. 
      - It uses the constructor /make-bind/ which takes two arguments
        /b-id/ and /b-ast/ and returns b-ast/.
 
 + Step 4 - Define /id?/. 
   - Define /id?/ to take values of the type /symbol?/. 

 + Step 5 - Define the datatype /fbind/. 
    1. Use the construct /define-datatype/. The name of the type is
       /fbind/ and the type predicate for /fbind is /fbind?/. 
    2. It takes a constructor /make-fbind/. /make-fbind/ takes three
       arguments /fb-id/, /fb-formals/ and /fb-body/. 
    - The type predicate for /fb-id/ is /id?/, /fb-formals/ is
      /list-of id?/ and /fb-body/ is /ast?/. 

 + Step 6 - Define function /fbind-id/.
    1. Use /define/ to build a function /fbind-id/. 
    2. It takes an argument /b/ using /lambda/. 
    3. Specify /cases/ on /fbind b/. 
       - It uses the constructor /make-fbind/ which takes three
         arguments /fb-id/ and /fb-formals/ and /fb-body/ and returns
         /fb-id/.

 + Step 7 - Define function /fbind-formals/.
   1. Use /define/ to build a function /fbind-formals/. 
   2. It takes an argument /b/ using /lambda/. 
   3. Specify /cases/ on /fbind b/. 
      - It uses the constructor /make-fbind/ which takes three
        arguments /fb-id/ and /fb-formals/ and /fb-body/ and returns
        /fb-formals/.

 + Step 8 - Define function /fbind-body/.
   1. Use /define/ to build a function /fbind-body/. 
   2. It takes an argument /b/  using /lambda/. 
   3. Specify /cases/ on /fbind b/. 
      - It uses the constructor /make-fbind/ which takes three
        arguments /fb-id/ and /fb-formals/ and /fb-body/ and returns
        /fb-body/.

#+BEGIN_EXAMPLE
After you finish writing the module, upload the program using the
upload the button in the right panel.
#+END_EXAMPLE

** Module 2 - Define the Semantic Domains for the Language with Recursive Functions

: Create a module "recursive-semanticdomain.ss". 
Require the modules relevant and provide the functions defined in this module.

#+BEGIN_EXAMPLE
While designing any programming language, it is highly important to
specify the set of values that the language manipulates.

Each language has, the following sets of values:
1. Expressible Values : set of values that are the results of
evaluation of expressions (ASTs), and,
2. Denotable Values : set of values which are bound to variables.
#+END_EXAMPLE

*** Task 1 - Define the domain values of the inputs for the language. 
    
#+BEGIN_EXAMPLE
In our case, since any expression evaluates to a number, the set of
expressible values would be a number or a procedure. Thus, an
expressible value has the type predicate expressible-value? which has
the following signature:

expressible-value? : any/c -> boolean?
#+END_EXAMPLE

 + Step 1 - Define the function to specify the expressible values from
   its signature. 
    - Define a predicate /expressible-value?/. 
    - It can return any value from number or proc. Thus, use or/c to
      specify that the return type can be a /number?/ or /proc?/. 

*** Task 2 - Define the domain values of the expressions for the language. 

#+BEGIN_EXAMPLE
Similarly, the denotable values are denoted by the type predicate
denotable-value? and has the following signature:

denotable-value? : any/c -> boolean?
#+END_EXAMPLE

 + Step 1 - Define the function to specify the denotable values from its signature. 
    - Define a predicate /denotable-value?/. 
    - It can return any value from number or proc. Thus, use or/c to
      specify that the return type can be a /number?/ or /proc?/. 

*** Task 3 - Define type /proc?/. 

 + Step 1 - Write the constructor for /prim-proc/. 
   1. /prim-proc/ takes two arguments /prim/ and /sig/. 
   2. The type predicate for /prim/ is /procedure?/.
   3. The type predicate for /sig/ is list of procedures /list-of
      procedure?/.

 + Step 2 - Write the constructor for /closure/. 
   1. /closure/ takes three arguments /formals/, /body/ and /env/. 
   2. The type predicate for /formals/ is list of symbols represented
      as /list-of symbol?/.
   3. The type predicate for /body/ is /ast?/.
   4. The environment is of the type /env?/. 

 + Step 3 - Use /define-datatype/ to define /proc/.
   1. The name of the function is /proc/. 
   2. The type predicate for the function is /proc?/. 
   3. It consists of two constructors /prim-proc/ and /closure/.

*** Task 4 - Define types /prim-proc?/ and /closure?/. 

 + Step 1 - Define /prim-proc?/. 
   1. Use /define/. The function name is /prim-proc?/.
   2. It takes an argument /p/ using /lambda/.
   3. Specify cases on /proc p/.
      - If /prim-proc/ takes arguments /prim/ and /sig/, it returns
        true /#t/. 
      - Else, it returns false /#f/. 

 + Step 2 - Define /closure?/.
   1. Use /define/. The function name is /closure?/.
   2. It takes an argument /p/ using /lambda/.
   3. Specify cases on /proc p/.
      - If /closure/ takes arguments /formals/, /body/ and /env/, it
        returns true /#t/. 
      - Else, it returns false /#f/. 

** Module 3 - Define the environment. 

: Create a module "recursive-env.ss". 
Require the modules relevant and provide the functions defined in this
module.

*** Task 1 - Define Abstract Syntax for empty, extended and extended recursive environments.

#+BEGIN_EXAMPLE
The first variant of an environment is the empty environment. The
empty environment is constructed using a constructor, which we name as
empty-env. The signature of the empty-env is: 

(empty-env) → env?

Extended Environment is a composition of environments. Composition is
a form of construction. In all the use cases for environments we will
encounter, we will come across the need to construct a new environment
from an existing environment and a set of identifiers and their
(respective) denotable values, instead of two environments. Therefore,
we talk of an extended environment built from a list of identifiers, a
list of denotable values, and an existing (old) environment.

The extended environment is denoted as extended-env. 
It takes three arguments - identifiers, denotable values and an old
environment. 
The signature for the extended-env is as follows:

(extended-env ids vals old-env) → env?
ids : (listof symbol?)
vals : (listof denotable-value?)
old-env : env?

Our abstract datatype for an environment also needs to be modified to
support recursive environments. So, in our environment definition. The
extended environment for recursive functions is denoted as
extended-rec-env. The signature is as follows:

(extended-rec-env fsyms lformals bodies outer-env) -> env?
fsyms : (list-of symbol?)
lformals : (list-of (list-of symbol?))
bodies : (list-of ast?)
outer-env : env?

The environment is defined using the construct define-datatype. The
datatype for the environment is called "env". The type predicate for
env is "env?". It takes three constructors - empty-env, extended-env
and extended-rec-env. 
#+END_EXAMPLE

 + Step 1 - Write the constructor for empty environment form its
   signature. 
    - Name it /empty-env/. 

 + Step 2 - Write the constructor for extended environment form its
   signature. 
    - Name it /extended-env/. It takes /ids/, /vals/ and /outer-env/
      as arguments. Write the type predicates along with the
      arguments. 

 + Step 3 - Write the constructor for extended recursive environment. 
   1. Name the constructor /extended-rec-env/. It takes 4 arguments
      /fsyms/, /lformals/, /bodies/ and /outer-env/. 
   2. The type predicate for /fsyms/ is /list-of symbol?/, /lformals/
      is /list-of (list-of symbol?)/, /bodies/ is /list-of ast?/ and
      /outer-env/ is /env?/. 

 + Step 4 - Define the datatype /env/. 
    - Use the construct /define-datatype/ to define /env/. The type
      predicate for /env/ is /env?/. It takes three constructors -
      /empty-env/, /extended-env/ and /extended-rec-env/. 

*** Task 2 - Define a look-up function to look up an identifier using an environment. 

#+BEGIN_EXAMPLE
The lookup function takes an environment and an identifier and returns
either a denotable value raises an "identifier not bound" error. The
lookup function is defined as "lookup-env" and it takes two
arguments - an identifier "id" and an environment "env". The signature
of the lookup function is as follows:

(lookup-env id env) → denotable-value?
id : symbol?
env : env?
#+END_EXAMPLE

 + Step 1 - Include the abstract syntax of the empty, extended and
   recursive environment. 

 + Step 2 - Define a module /empty-env?/ to check if the given
   environment is empty or not.
   1. Use /define/ to define a type /empty-env?/. 
   2. Create a local function using /lambda/ and use /e/ as an
      argument. 
   3. Specify cases on the /env e/. 
      - Case 1: for /empty-env ()/, it returns true /#t/. 
      - Case 2: Else false /#f/. 

 + Step 3 - Define a module /extended-env?/ to check if the given
   environment is empty or not.
   1. Use /define/ to define a type /extended-env?/. 
   2. Create a local function using /lambda/ and use /e/ as an
      argument. 
   3. Specify cases on the /env e/. 
      - Case 1: for /extended-env (syms vals outer-env)/, it returns
        true /#t/. 
      - Case 2: Else false /#f/. 

 + Step 4 - Define a module /extended-rec-env?/ to check if the given
   environment is empty or not.
   1. Use /define/ to define a type /extended-rec-env?/. 
   2. Create a local function using /lambda/ and use /e/ as an
      argument. 
   3. Specify cases on the /env e/. 
      - Case 1: for /extended-rec-env (fsyms lformals bodies
        outer-env)/, it returns true /#t/. 
      - Case 2: Else false /#f/. 

 + Step 5 - Define a procedure /list-index/. 
   1. Use /define/ to build a procedure /list-index/. 
   2. Create a local function using /lambda/. Use arguments /ls/ and
      /a/.
   3. Create a binding using /letrec/. Bind an id /loop/ to the local
      function created by /lambda/. It takes /ls/ and /ans/ as its
      arguments.
   4. Specify if-else condition inside the /lambda/. 
      1. If list is null?, return -1.
      2. If the first element of list is equal to /a/, return /ans/. 
      3. If true, run the procedure /loop/ on rest of the list and
         increment /ans/ by 1.
   5. Along with the binding at the level of /loop/ in letrec, it
      again calls the binding /loop/ with the arguments /ls/ and /0/. 

 + Step 6 - Define procedure /lookup-env/ to check if an identifier is
   bound  in a  given environment.   
   1. Use  /define/ to  build a  procedure /lookup-env/. 
   2. Create  a local  function using /lambda/  with arguments /e/ and
      /x/.  
   3. Specify the  cases on  /env/ and /e/.   
      - Case 1: /empty-env/ raises error:  "unbound identifier ~a".  
      - Case 2: /extended-env/ which takes arguments /syms/, /vals/
        and  /outer-env/. 
        + Use /let/ to bind the id /j/  to the  value returned by
          /list-index/ which  takes arguments /syms/ and /x/. 
        + Specify if-else condition using keyword /cond/.  
          - If /j/ equals /-1/,  recursively call the function
            /lookup-env/  and give the arguments /outer-env/  and
            /x/. 
          - Else,  if it returns true,  return the element in /vals/
            at position /j/.
      - Case 3: /extended-rec-env/  which takes arguments /fsyms/,
        /lformals/, /bodies/ and  /outer-env/. 
        + Use /let/ to  bind the id /j/  to the value returned   by
          /list-index/  which   takes   arguments  /fsyms/  and /x/. 
        + Specify  if-else condition using  keyword /cond/.  
          - If  /j/ equals /-1/,  recursively  call  the   function
            /lookup-env/  and  give  the arguments  /outer-env/ and
            /x/. 
          - Else,  if it  returns true,  create a binding using the
            keyword /let/. 
            + Bind the id /formals/ to the value of the   list
              /lformals/  at   the  position   /j/  using   the
              keyword /list-ref/. 
            + Create another binding using the id /body/ to the value
              of the list /bodies/  at position /j/ using the  keyword
              /list-ref/. 
            +  Now, call the procedure /closure/  and pass the
               arguments /formals/, /body/ and /e/.

#+BEGIN_EXAMPLE
After you finish writing the module, upload the program using the
upload the button in the right panel. 
#+END_EXAMPLE

** Module 4 - Define the Evaluator for the Language with Recursive Functions.
 
: Create a module "recursive-eval.ss". 
Require the modules relevant and provide the functions defined in this
module.

*** Task 1 - Define the Evaluator for Language with Recursive Functions. 

#+BEGIN_EXAMPLE
The evaluator takes an ast and returns the value obtained by
evaluating the ast, i.e. an expressible value. Hence the signature
would look like:

(eval-ast ast) → expressible-value?
  ast : ast?

For the naive case, where the ast consists of a number, the returned
value would necessarily be the value of the number.

However, in the case of an expression, we first need to evaluate each
of the operands and then apply the operator on the obtained evaluated
values. Thus, we need a procedure "apply-proc" that takes an operator
and a list of expressible values, and applies the operator on them.

If it is an assume expression, we create an environment with the
identifiers and variables given and proceed to evaluate the body.

In case of an identifer, we call the "lookup-env" function to evaluate
it to a value.

If it is a closure, we evalute to check if the operator is a primitive
operator and apply "apply-prim-proc", else we apply the function using
"apply-closure".

Note that for a recursive function, the evaluation procedure remains
the same, except for the creation and use of the recursive
environment. The actual recursion takes place when using the lookup.

#+END_EXAMPLE
 
 + Step 1 - Define procedure /eval-ast/.
   1. Use /define/ to define the procedure /eval-ast/.
   2. Create a local function using keyword /lambda/. Use /a/ as an
      argument to /lambda/. 
   3. Specify cases on /ast a/.
 
 + Step 2 - Define the evaluator for numbers. 
    - /number/ takes an argument /datum/ and returns /datum/. 

 + Step 3 - Define the evaluator for the identifier. 
   1. We call the /lookup-env/ to evaluate the identifier and return a
      value.
   2. /id-ref/ takes two arguments /sym/ and the result of the
      procedure /lookup-env/ which takes two arguments /env/ and
      /sym/.  
 
 + Step 4 - Define  the evaluator for the assume expression.  
   1. We create an environment with the identifiers and variables
      given and proceed to evaluate the body. 
   2. /assume/ takes arguments /binds/ and /body/. 
   3. It creates a dynamic binding using /let*/  to bind  a procedure
      /bind-id/ to  its list  of  arguments in /binds/ and binds it to
      the id /ids/. /map/ keyword is used to apply procedure /bind-id/
      to all the elements in /bind/. 
   4. Another binding is created on the procedure /bind-ast/ to which
      takes the argument /binds/ to the id /asts/. /map/ keyword is
      used to apply the procedure /bind-ast/ to all the elements of
      /binds/. 
   5. A third binding is created with the id /vals/. The binding is
      created on the recursive call of /eval-ast/ and /map/ is used to
      apply this procedure on all elements of /asts/. The recursive
      call of /eval-ast/ takes an argument /a/ using /lambda/ and
      calls itself (/eval-ast/) with the arguments /a/ and /env/. 
   6. A fourth binding is created on the procedure /extended-env/
      which takes the arguments /ids/, /vals/ and /env/ and binds them
      to the id /new-env/.
   7. Call the procedure /eval-ast/ with the arguments /body/ and /new-env/. 

 + Step 5 - Define the evaluator for /function/. 
   1. Specify this as a case in /ast a/. 
   2. /function/ takes two arguments /formals/ and /body/. 
   3. The body of the /function/ evaluator includes a call to the
      closure constructor.
   4. /closure/ takes arguments /formals/, /body/ and /env/. 

 + Step 6 - Define the evaluator for /app/. 
   1. Specify this as a case in /ast a/. 
   2. /app/ takes two arguments /rator/ and /rands/. 
   3. The body consists of a binding using the keyword /let/. It takes
      an id /p/ and binds it to the result of the recursive call of
      /eval-ast/. /eval-ast/ takes two arguments /rator/ and /env/. 
   4. The second binding consists of the id /args/ which is bound to
      the recursive call of /eval-ast/. This time, the list of
      operands are passed as arguments. Thus, the iteration on rest of
      the list is done using the keyword /map/ on the list /rands/. 
   5. Specify a local function using /lambda/ and give the argument /rand/. 
   6. Call the recursive procedure /eval-ast/ which takes the
      arguments /rand/ and /env/. 
   7. Specify an if-else condition. 
      - If /p/ is of type /proc?/, apply function /apply-proc/ on the
        arguments /p/ and /args/. 
      - Else, produce the error message: "eval-ast "application rator
        is not a proc ~a" with the argument /a/. 

 + Step 7 - Define the evaluator for /ifte/. 
   1. /ifte/ comes with the syntax form /ifte (test then else-ast)/. 
   2. Create a binding using the keyword /let/. 
   3. Bind the id /b/ to the result of the recursive call to
      /eval-ast/ with the arguments /test/ and /env/. 
   4. If the value of /b/ is a boolean, again make a recursive call to
      the procedure /eval-ast/ with the arguments /if b then else-ast/
      and /env/. 
   5. Else, produce the error message: eval-ast "ifte test is not a
      boolean ~a" with the argument /a/.

 + Step 8 - Define the evaluator for /recursive/. 
   1. /recursive/ comes with the syntax form /recursive (fbinds
      body)/. 
   2. Create a binding using the keyword /let*/. 
   3. Bind the id /fids/ to the function /fbind-id/ which takes the
      argument /fbinds/. Use the keyword /map/ to apply /fbind-id/ to
      the elements of list /fbinds/. 
   4. Bind the id /lformals/ to the function /fbind-formals/ which
      takes the argument /fbinds/. Use the keyword /map/ to apply
      /fbind-formals/ to the elements of list /fbinds/. 
   5. Bind id /bodies/ to the function /fbind-body/ which takes the
      argument /fbinds/. Use the keyword /map/ to apply /fbind-body/
      to the elements of list /fbinds/. 
   6. Bind id /new-env/ to the result of the procedure
      /extended-rec-env/ which takes the arguments /fids/, /lformals/,
      /bodies/ and /env/.
   7. Make a recursive call to the procedure /eval-ast/ and provide
      the arguments /body/ and /new-env/. 

*** Task 2 - Define other functions. 

  + Step 1 - Define procedure /apply-proc/. 
    1. Define a local function using /lambda/. Provide /p/ and /args/
       as arguments. 
    2. Specify cases on /proc p/. 
       - Case 1: Constructor /prim-proc/ with arguments /prim/ and
         /sig/. Apply the function /apply-prim-proc/ on arguments
         /prim/, /sig/ and /args/.
       - Case 2: Constructor /closure/ with arguments /formals, /body/
         and /env/. Apply the function /apply-closure/ on /formals/,
         /body/, /env/ and /args/. 

 + Step 2 - Define procedure /apply-prim-proc/. 
   1. Define a local function using /lambda/. Provide /prim/, /sig/
      and /args/ as arguments. 
   2. Create a dynamic binding using /let*/. Bind the id /args-sig/ to
      rest of the signatures passed as arguments /sig/ using the
      keyword /rest/. 
   3. Specify a condition using keyword /cond/.
      - If /and/ of both conditions return false, apply /prim/ on
        argument /args/ using the keyword /apply/. 
        + First Condition: Length of /args-sig/ is equal to length of
          /args/ (use the keyword /length/) 
        + Second Condition: Apply keyword /andmap/ on the function
          call of /match-arg-type/ which takes two arguments
          /args-sig/ and /args/
      - Else, if true /#t/, produce the error message "apply-prim-op
        "incorrect number or type of arguments to ~a"" with the
        argument /prim/. 
 
 + Step 3 - Define the function /match-arg-type/. 
    - Create a local function using the keyword /lambda/. 
    - Give /arg-type/ and /val/ as arguments. Return /arg-type/ and
      /val/. 

 + Step 4 - Define the function /apply-closure/. 
   1. Create a local function using the keyword /lambda/. Give
      /formals/, /body/, /env/ and /args/ as arguments. 
   2. Create a binding using the keyword /let/. Bind the id /new-env/
      to the result of the procedure call
      /extended-env/. /extended-env/ takes /formals/, /args/ and /env/
      as arguments. 
   3. Call /eval-ast/ recursively with arguments /body/ and /new-env/. 

#+BEGIN_EXAMPLE
After you finish writing the module, upload the program using the
upload the button in the right panel.
#+END_EXAMPLE

** Module 5 - Design the Parser

: Create a module "recursive-parser.ss". 
Require the modules relevant and provide the functions defined in this
module.

#+BEGIN_EXAMPLE
The concrete syntax of this language is as follows:

exp ::= <number> | <identifier> | (<op> exp ...) |
        (assume (listof<id> listof<exp>) exp) | 
        (function (listof<id>) <ast>) | (app <ast> listof<ast>) | 
        (recursive (listof ( (listof<id> list of<exp>) exp ) exp)
op ::= one of <op-symbols>

where <op-symbols> = (+,-,/,*)
#+END_EXAMPLE

*** Task 1 - Define the parser function. 

#+BEGIN_EXAMPLE
The task of a parser is to convert any given program sequence into an
ast. Hence, the signature of our parser procedure would be:

(parse code) → ast?
code : any/c?

While going through the input sequence if we find the current literal
to be a terminal i.e. a number, then we output the corresponding node
of the ast i.e. (number literal).

If it is an assume expression, we simply output the assume function
along with the ’bind’ to create an expression which can be evaluated.

In case of an identifer, we replace it with a (id-ref <identifier>).

If the expression is a function expression, we replace it with a
closure which has a list of operands, and an ast to apply on these
operands.

If the expression is a recursive function, we get a list of function
bindings using fbinds and a body which to evaluate in a newly created
recursive environment consisting of the aforementioned function
bindings.

In case of an application expression, we parse the closure to figure
if it is a primitive procedure and then call the parse function for
the list of expressions (i.e. the operands).
#+END_EXAMPLE

 + Step 1 - Define a procedure /parse/. 
   1. Use /define/ keyword to create procedure /parse/. 
   2. Create a local function using the keyword /lambda/ and give the
      argument /d/. 
   3. Use /match/ keyword on /d/ to do the syntax matching according
      to the cases specified. 

 + Step 2 - Define the parser for numbers. 
    - If the form of syntax is /? number? n/, it returns the form
      /number n/. 

 + Step 3 - Define the parser for the identifier. 
    - If the form of syntax is /? id? x/, it returns the form /id-ref
      x/. 

 + Step 4 - Define the parser for the functions.
    - If a /list/ of functions denoted by the constant /function/ is
      found in the syntax, it returns the form /function x (parse
      body)/.
    - The function contains lists of identifiers of the form /? id? x/
      and a body denoted by /body/.

 + Step 5 - Define the  parser for the assume expression.  
   1. If a /list/ of assume expression denoted by  the constant
      /assume/ is found in the syntax, it creates a binding using the
      keyword /let*/ and binds the id /a/ to the  result of the
      recursive procedure  /parse/ which takes the argument /e/  and
      applies the  procedure on the remaining  elements in the list
      using the keyword /map/.  
   2. It also creates a second binding on the id  /b/ to the result
      of the constructor  /make-bind/ which takes two arguments /x/
      and /a/ and applies it on the  rest of the elements in the list
      using the keyword /map/. 
   3. And, it returns the syntax of the form /assume b (parse body)/.  
   4. The assume syntax contains lists of the expression which in
      turn contains list of identifiers  of the form /? id? x/ and /e/
      and a body denoted by /body/.

 +  Step 6 -  Define the  parser for  the expressions.   
    1. If a  list of operators and operands is found of  the form
       /list rator rands .../, a binding is created  using the
       function /let*/. 
    2. Id  /rator/ is bound to the result of the recursive procedure
       /parse/ which takes the argument /rator/ and  another id
       /rands/ is bound  to the  recursive procedure /parse/ on  rest
       of the /rands/  using the keyword  /map/.   
    3. It returns the form /app rator rands/.

 + Step 7 - Define the parser for /ifte/.
    - The syntax of /ifte/ is a list of /'ifte a b c/. Return /ifte
      (parse a) (parse b) (parse c)/.

 + Step 8 - Define the parser for /recursive/. 
   1. If a /list/ of assume expression denoted by  the constant
      /assume/ is found in the syntax, create a binding using the
      keyword /let*/. 
   2. Bind the id /fast/ to the recursive call of procedure /parse/
      which takes /fbody/ as the argument. Apply the procedure /parse/
      on all the elements of the list /fbody/ using the keyword
      /map/. 
   3. Bind the id /fbinds/ to the recursive call of the procedure
      /make-fbind/ which takes the arguments /f/, /formals/ and
      /fast/. Apply the procedure /make-fbind/ on all elements of the
      list /f/ using the keyword /map/. 
   4. Return /recursive fbinds (parse body)/. 

The syntax of recursive is:

#+begin_example
The template of the Scheme code should be:

(list
          'recursive
          (list
            (list
              (? id? f)
              (and formals (list (? id? x) ...))
              fbody) ...)
          body)
#+end_example

 + Step 9 - Define the error. 
    - If the form of syntax does not above any of the above defined,
      an error message is produced: parse "don't know how to parse ~a"
      along with the argument /d/. 

*** Task 2 - Define the type /id?/.

 + Step 1 - Use /define/ to create a function /id?/. 

 + Step 2 - Create a local function using the keyword /lamba/ and name
   the argument /x/. 

 + Step 3 - /x/ is of the type /symbol?/ /and/ is not present in the
   function /*keywords*/. 

 + Step 4 - Use the keyword /memq/ to find /x/ in the list of
   /*keywords*/.

*** Task 3 - Define list of keywords. 
 
 + Step 1 - Use /define/ keyword to define a list of keywords. 
 
 + Step 2 - Name the function/*keywords*/. 
 
 + Step 3 - The defined list of keywords includes /ifte/, /assume/,
   /function/ and /recursive/. 

#+BEGIN_EXAMPLE
After you finish writing the module, upload the program using the
upload the button in the right panel. 
#+END_EXAMPLE

** Module 6 - Run the interpreter. 

: Create a module "recursive-run.ss". 
Require the modules relevant and provide the functions defined in this
module. 

*** Task 1 - Define a nonzero function. 

: It checks whether a given number is 0 or not. 

 + Step 1 - Use /define/ keyword. The name of the function should be
   /nonzero?/. 

 + Step 2 - Use the keyword /and/c/, /number?/, /not/c/ and /zero?/ to
   check if the given number is 0 or not. 

*** Task 2 - Define the operators. 

: All the operators are of type proc?. 

 + Step 1 - Define plus operator. 
   1. The name of the function is /+p/. 
   2. Use the /prim-proc/ constructor to define the signature of the
      plus operator. 
   3. Mention the symbol + as one of the arguments to the constructor. 
   4. The other argument to the constructor prim-proc is the
      signature. A list takes two numbers denoted by /number?/ and
      gives back a /number?/. 

 + Step 2 - Define minus operator. 
   1. The name of the function is /-p/. 
   2. Use the /prim-proc/ constructor to define the signature of the
      plus operator. 
   3. Mention the symbol - as one of the arguments to the constructor. 
   4. The other argument to the constructor prim-proc is the
      signature. A list takes two numbers denoted by /number?/ and
      gives back a /number?/. 

 + Step 3 - Define multiply operator. 
   1. The name of the function is /*p/. 
   2. Use the /prim-proc/ constructor to define the signature of the
      plus operator. 
   3. Mention the symbol * as one of the arguments to the constructor. 
   4. The other argument to the constructor prim-proc is the
      signature. A list takes two numbers denoted by /number?/ and
      gives back a /number?/. 

 + Step 4 - Define division operator. 
   1. The name of the function is /p. 
   2. Use the /prim-proc/ constructor to define the signature of the
      plus operator. 
   3. Mention the symbol / as one of the arguments to the
      constructor. 
   4. The other argument to the constructor prim-proc is the
      signature. A list takes two numbers denoted by /number?/ and
      /nonzero?/ as the denominator can not be zero and gives back a
      /number?/.
 
*** Task 3 - Define /*init-env*/.

: It initializes the extended environment. 

 + Step 1 - Use /define/ keyword to define this /*init-env*/
   function. 

 + Step 2 - It calls /extended-env/ and gives it three arguments -
   operator symbols (+ , - , *, /) as constants, list of operator
   definitions (+p, -p, *p, /p) and /empty-env/. 

*** Task 4 - Define /run/. 

 + Step 1 - Use keyword /define/. The name of the function is /run/. 

 + Step 2 - It takes an argument /ast/ using the keyword /lambda/. 

 + Step 3 - Call the function /eval-ast/ and give the arguments -
   /ast/ and /*init-env*/. 

*** Task 5 - Define /go/.

: This is the function to run the interpreter for Language with Recursive Functions.

 + Step 1 - Use keyword /define/. The name of the function is /go/. 

 + Step 2 - It takes an argument /e/ using the keyword /lambda/. 

 + Step 3 - Call the function /run/ which in turn calls /parse/ and
   takes the argument /e/. 

#+BEGIN_EXAMPLE
After you finish writing the module, upload the program using the
upload the button in the right panel.
#+END_EXAMPLE

* Exercise

*Design an interpreter for Boolean numbers.*

The syntax is:

#+begin_example
exp ::= bool | exp | (op (bool)+)
bool ::= 0 | 1
op ::= & | || | ~
#+end_example

Define all the modules and include them in a file /boolean.ss/ and upload it. The module names should be prefixed by /bool/ instead of /num/ from the experiment modules. Let the other functions names be the same. 

* Further Readings
* Feedback 
Please provide your feedback [[http://virtual-labs.ac.in/feedback/][here]].


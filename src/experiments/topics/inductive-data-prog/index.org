#+TITLE: Experiment 2 - Programming with Inductive Data

#+TAGS: readings(r) hw(h)
#+SETUPFILE: ../../../org-templates/level-2.org
#+LINK_HOME: ../../content.html
#+LINK_UP:  ../../content.html#sec-6

* Prerequisites for the Experiment

You should have read Chapter - 1 from the text book *EOPL*. 
* Learning Objective of the Experiment 

The objective of this experiment is to design and implement recursive procedures on inductive data types. 

* Theory
The structure of inductive datatypes lends itself to an elegant way of
writing programs  that operate on inductive data.  These programs call
themselves recursively  (i.e, call by referring to  themselves) on the
substructures of the inductive datatype,  but not on the base cases of
the inductive type. The key point to note is that the structure of the
recursive programs parallels the structure of the inductive type.

* Procedure

#+BEGIN_EXAMPLE
Instructions
1. Create a file named "inductive-data-prog.ss". 
2. You can include all the modules in this file, OR,
3. You can "require" all the modules in this file.
4. All the modules are verifiable individually. You can also test your code by placing them in a single file. 
5. Make sure you upload all the files before testing them. 
#+END_EXAMPLE

** Module 1 - Compute Factorial of A Number

#+BEGIN_EXAMPLE
Recipe for the design:

Check for the base case(s) first.

n : nat?
if n is 0, then n! = 1

Do note that  these base cases turn out to  be the ’end-condition’ for your recursive program, i.e.  the point(s) 
where the recursive program stops calling itself and terminates.

Define your problem recursively, and call the function recursively
else n! = n * (n-1)!

The signature of the function is:

(! num) → nat?
  num : nat?
#+END_EXAMPLE

*** Task 1 - Define the function to compute the factorial of a number. 

: Create a module "factorial.ss".

+ Step 1 - Name the function /fact/. 
+ Step 2 - Pass an argument /n/ using the keyword /lambda/.
+ Step 3 - Specify the if-else condition using the keyword /cond/.
  - If /n/ is 0, return 1.
  - Else multiply /n/ with the result of the recursive function /!/ which takes /n-1/ as the argument. 

#+BEGIN_EXAMPLE
After you finish writing the module, upload the program using the upload the button in the right panel. You can test 
the module by test files by pressing the Test button.
#+END_EXAMPLE

*** Task 2 - Define the function to compute the factorial of a number using an accumulator. 

: Create a module "factorial-acc.ss".

#+BEGIN_EXAMPLE
When we define a function according to the above method, this is how each call appears:

(fact 3)
= (* 3 (fact 2))
= (* 3 (* 2 (fact 1)))
= (* 3 (* 2 (* 1 (fact 0))))

This kind of growing context may result in a stack-overflow problem. Also, the above logic fails for cases like (fact -1),
where it results in an infinite loop.

In order to overcome this issue, we use "accumulators". Accumulator is the value in which we store the result so far. 
#+END_EXAMPLE

+ Step 1 - Name the function /fact-acc/. 
+ Step 2 - Use the keyword /lambda/ and pass two arguments /n/ and /a/. 
+ Step 3 - Specify an if-else condition using the keyword /cond/.
  - If /n/ is 0, return a.
  - Else, call /fact-acc/ recursively giving the arguments /n-1/ and /a*n/. 
+ Step 4 - Define another function /fact/ which calls /fact-acc/ and also provide an argument /n/. 
+ Step 5 - Make a call to the function /fact-acc/ and give the arguments /n/ and 1. 

#+BEGIN_EXAMPLE
After you finish writing the module, upload the program using the upload the button in the right panel. You can test 
the module by test files by pressing the Test button.
#+END_EXAMPLE

** Module 2 - Compute the length of a list. 

: Create a module "list-length.ss".

#+BEGIN_EXAMPLE
This function computes the length of the list. The signature of the function is:

(list-length ls) → nat?
  ls : list?
#+END_EXAMPLE

*** Task 1 - Implement the function /list-length/. 

+ Step 1 - Define the function /list-length/. 
+ Step 2 - Use the keyword /lambda/ to pass the argument /ls/. 
+ Step 3 - Specify an if-else condition using the keyword /cond/. 
  - If /ls/ is null, return 0.
  - Else, call /list-length/ recursively passing the rest of the list /ls/ using the keyword /rest/ and add 1 to this call. 

#+BEGIN_EXAMPLE
After you finish writing the module, upload the program using the upload the button in the right panel. You can test 
the module by test files by pressing the Test button.
#+END_EXAMPLE

** Module 3 - Compute the sum of the elements in a list. 

: Create a module "list-sum.ss".

#+BEGIN_EXAMPLE
This function computes the sum of all the elements in a list. The signature of the function is:

(list-sum ls) → nat?
  ls : list?
#+END_EXAMPLE
 
*** Task 1 - Implement the function /list-sum/.

+ Step 1 - Define the function /list-sum/. 
+ Step 2 - Use /lambda/ to pass the list /ls/ as an argument.
+ Step 3 - Specify an if-else condition using the keyword /cond/. 
  - If /ls/ is null, return 0.
  - Else
    + Fetch the first element of the list /ls/ using the keyword /first/. 
    + Call the function /list-sum/ recursively by passing the rest of the list /ls/ as argument using the keyword /rest/. 
    + Add both these elements. 

#+BEGIN_EXAMPLE
After you finish writing the module, upload the program using the upload the button in the right panel. You can test 
the module by test files by pressing the Test button.
#+END_EXAMPLE

* Exercise

* Further Readings

* Feedback 
Please provide your feedback [[http://virtual-labs.ac.in/feedback/][here]].

